{"version":3,"sources":["trivia.png","Images/castelo.gif","Images/nino.webp","Images/rato.gif","Components/EmailInput/index.js","Components/LoginInput/index.js","redux/actions/index.js","pages/Login/index.js","Components/Header/index.js","helpers/scoreCalculator.js","Components/ButtonNext/index.js","Components/Game/index.js","pages/Trivia/index.js","pages/Configuracoes/index.js","Components/HeaderFeedback/index.js","pages/Feedback/index.js","pages/Ranking/index.js","serviceWorker.js","redux/reducers/apiReducer.js","redux/reducers/index.js","redux/store/index.js","index.js","App.js"],"names":["module","exports","EmailInput","this","props","value","onChange","htmlFor","className","type","name","id","data-testid","React","Component","LoginInput","addTrivia","payload","Login","state","email","login","handleChange","bind","checkFields","removeCurrent","event","target","setState","length","history","functionAddUserData","fetchToken","token","localStorage","setItem","push","fetch","urlToken","json","action","disabled","onClick","handleClick","src","logo","alt","castelo","connect","userName","apiReducer","userData","userEmail","dispatch","addUserData","Header","imgURL","fetchImgSrc","hashed","MD5","toString","userScore","score","scoreCalculator","timer","difficult","hard","medium","easy","ButtonNext","buttonDisabledOrTime","time","buttonDisabled","increaseCurrent","rst","saveRankOnLocalStorage","buttonClick","Game","answered","constInterval","undefined","counting","setAnswer","startTimming","stopTimming","makeInterval","saveOnLocalStorage","reset","correct","trivia","addPoints","addCorrectQuestion","currentQuestion","results","current","difficulty","nameUser","scoreUser","player","img","oldRanking","ranking","JSON","parse","newRanking","sort","a","b","map","currPlayer","index","rankingString","stringify","emailUser","setConstInterval","setInterval","prevState","clearInterval","points","assertionsUser","assertions","gravatarEmail","answer","allAnswers","c","correctAnswer","correct_answer","wrongAnswers","incorrect_answers","compareFunction","category","dangerouslySetInnerHTML","__html","question","key","trivias","correctQuestionCounter","Trivia","getTrivia","getItem","setTrivia","questions","requestions","to","Configuracoes","HeaderFeedback","Feedback","number","message","totalScore","phraseConstructor","nino","Ranking","playerRank","rato","Boolean","window","location","hostname","match","INNITIAL_STATE","rootReducer","combineReducers","store","createStore","composeWithDevTools","applyMiddleware","thunk","Cypress","ReactDOM","render","exact","path","component","document","getElementById","navigator","serviceWorker","ready","then","registration","unregister"],"mappings":"oGAAAA,EAAOC,QAAU,IAA0B,oC,mBCA3CD,EAAOC,QAAU,IAA0B,qC,mBCA3CD,EAAOC,QAAU,IAA0B,mC,mBCA3CD,EAAOC,QAAU,IAA0B,kC,yaC4B5BC,E,iLAxBH,IAAD,EACqBC,KAAKC,MAAzBC,EADD,EACCA,MAAOC,EADR,EACQA,SACf,OACE,2BAAOC,QAAQ,QAAQC,UAAU,eAAjC,SAEE,2BACEA,UAAU,cACVC,KAAK,OACLC,KAAK,QACLC,GAAG,QACHC,cAAY,uBACZP,MAAQA,EACRC,SAAWA,S,GAbIO,IAAMC,WCyBhBC,E,iLAxBH,IAAD,EACqBZ,KAAKC,MAAzBC,EADD,EACCA,MAAOC,EADR,EACQA,SACf,OACE,2BAAOC,QAAQ,QAAQC,UAAU,eAAjC,SAEE,2BACEA,UAAU,cACVC,KAAK,OACLC,KAAK,QACLC,GAAG,QACHC,cAAY,oBACZP,MAAQA,EACRC,SAAWA,S,GAbIO,IAAMC,W,kCCyBhBE,EA5BG,SAACC,GAAD,MAAc,CAC9BR,KAAM,aACNQ,YCQIC,G,kBACJ,WAAYd,GAAQ,IAAD,8BACjB,4CAAMA,KACDe,MAAQ,CACXC,MAAO,GACPC,MAAO,IAET,EAAKC,aAAe,EAAKA,aAAaC,KAAlB,gBACpB,EAAKC,YAAc,EAAKA,YAAYD,KAAjB,gBAPF,E,kFAYjBE,EAD0BtB,KAAKC,MAAvBqB,mB,mCAIGC,GAAQ,IAAD,EACMA,EAAMC,OAAtBjB,EADU,EACVA,KAAML,EADI,EACJA,MACdF,KAAKyB,SAAL,eACGlB,EAAOL,M,oCAIG,IAAD,EACaF,KAAKgB,MAAtBC,EADI,EACJA,MACR,QAA0B,IAFd,EACGC,MACAQ,QAAiC,IAAjBT,EAAMS,U,iIAII1B,KAAKC,MAAtC0B,E,EAAAA,QAASC,E,EAAAA,oB,EACQ5B,KAAKgB,MAAtBC,E,EAAAA,MAAOC,E,EAAAA,MAKfU,EAJgB,CACdrB,KAAMW,EACND,U,mBAGkBjB,KAAK6B,c,OAAnBC,E,OAQNC,aAAaC,QAAQ,QAASF,GAE9BH,EAAQM,KAAK,gB,0LAIUC,MAAM,sD,cAAvBC,E,0BACkBA,EAASC,Q,uBAAzBN,E,EAAAA,M,kBACDA,G,sEAGC,IAAD,SACkB9B,KAAKgB,MAAtBE,EADD,EACCA,MAAOD,EADR,EACQA,MACPU,EAAY3B,KAAKC,MAAjB0B,QACR,OACE,8BAEE,0BAAMU,OAAO,MAAMhC,UAAU,cAC3B,kBAAC,EAAD,CAAYF,SAAWH,KAAKmB,aAAejB,MAAQgB,IAEnD,kBAAC,EAAD,CAAYf,SAAWH,KAAKmB,aAAejB,MAAQe,IAEnD,4BACEZ,UAAU,eACVC,KAAK,SACLG,cAAY,WACZ6B,SAAWtC,KAAKqB,cAChBkB,QAAU,kBAAM,EAAKC,gBALvB,SAWA,4BACEnC,UAAU,gBACVC,KAAK,SACLG,cAAY,eACZ8B,QAAU,kBAAMZ,EAAQM,KAAK,oBAJ/B,wBASF,6BAAS5B,UAAU,yBACjB,yBAAKoC,IAAMC,IAAOrC,UAAU,WAAWsC,IAAI,SAE3C,yBAAKF,IAAMG,IAAUD,IAAI,kB,GAzFfjC,IAAMC,YA8HXkC,eAJS,SAAC7B,GAAD,MAAY,CAClC8B,SAAU9B,EAAM+B,WAAWC,SAASzC,KACpC0C,UAAWjC,EAAM+B,WAAWC,SAAS/B,UAjBZ,SAACiC,GAAD,MAAe,CACxCtB,oBAAqB,SAACd,GAAcoC,EDhHX,SAACpC,GAAD,MAAc,CACvCR,KAAM,eACNQ,WC8G6CqC,CAAYrC,KACzDQ,cAAe,WAAQ4B,ED/FU,CACjC5C,KAAM,sBC+GOuC,CAA6C9B,G,iBClItDqC,G,kBACJ,WAAYnD,GAAQ,IAAD,8BACjB,4CAAMA,KACDe,MAAQ,CACXqC,OAAQ,wEAEV,EAAKC,YAAc,EAAKA,YAAYlC,KAAjB,gBALF,E,iFASjBpB,KAAKsD,gB,oCAGQ,IACLL,EAAcjD,KAAKC,MAAnBgD,UACFM,EAASC,IAAIP,GAAWQ,WAC9BzD,KAAKyB,SAAS,CACZ4B,OAAO,mCAAD,OAAqCE,O,+BAIrC,IAAD,EACyBvD,KAAKC,MAA7B6C,EADD,EACCA,SAAUY,EADX,EACWA,UACVL,EAAWrD,KAAKgB,MAAhBqC,OACR,OACE,4BAAQhD,UAAU,iBAChB,yBAAKoC,IAAMY,EAASV,IAAI,cAAclC,cAAY,2BAClD,wBAAIA,cAAY,sBAAsBqC,GACtC,wBAAIrC,cAAY,gBAAgBiD,Q,GA5BnBhD,IAAMC,YA6CZkC,eALS,SAAC7B,GAAD,MAAY,CAClC8B,SAAU9B,EAAM+B,WAAWC,SAASzC,KACpC0C,UAAWjC,EAAM+B,WAAWC,SAAS/B,MACrCyC,UAAW1C,EAAM+B,WAAWC,SAASW,SAEC,KAAzBd,CAA+BO,G,eCxC/BQ,G,MAXS,SAACC,EAAOC,GAQ9B,OADmB,GACGD,EAPE,CACtBE,KAAM,EACNC,OAAQ,EACRC,KAAM,GAEgCH,KCApCI,G,kBACJ,aAAe,IAAD,8BACZ,+CACKC,qBAAuB,EAAKA,qBAAqB/C,KAA1B,gBAFhB,E,oFAKU,IAAD,EACYpB,KAAKC,MAA9BmE,EADa,EACbA,KACR,OAAuB,IAFF,EACPC,gBAC2B,IAATD,I,oCAMnB,IAAD,EAC6CpE,KAAKC,MAAtDqE,EADI,EACJA,gBAAiBC,EADb,EACaA,IAAKC,EADlB,EACkBA,uBAC9BF,IACAC,IACAC,M,+BAGQ,IAAD,OACP,OACE,6BAEIxE,KAAKmE,uBAAyB,gCAE1B,4BACE9D,UAAU,cACVC,KAAK,SACLG,cAAY,WACZ8B,QAAU,kBAAM,EAAKkC,gBAJvB,mB,GA3BW/D,IAAMC,YAqDhBkC,cAAQ,MAJI,SAACK,GAAD,MAAe,CACxCoB,gBAAiB,kBAAMpB,EJpCQ,CAC/B5C,KAAM,oBIsCOuC,CAAkCqB,GCjD3CQ,E,YACJ,WAAYzE,GAAQ,IAAD,8BACjB,4CAAMA,KACDe,MAAQ,CACX2D,UAAU,EACVN,gBAAgB,EAChBD,KAAM,GACNQ,mBAAeC,EACfC,UAAU,GAEZ,EAAKC,UAAY,EAAKA,UAAU3D,KAAf,gBACjB,EAAK4D,aAAe,EAAKA,aAAa5D,KAAlB,gBACpB,EAAK6D,YAAc,EAAKA,YAAY7D,KAAjB,gBACnB,EAAK8D,aAAe,EAAKA,aAAa9D,KAAlB,gBACpB,EAAK+D,mBAAqB,EAAKA,mBAAmB/D,KAAxB,gBAC1B,EAAKgE,MAAQ,EAAKA,MAAMhE,KAAX,gBACb,EAAKoD,uBAAyB,EAAKA,uBAAuBpD,KAA5B,gBAfb,E,iFAmBjBpB,KAAKmF,uB,2CAGe,IAAD,EACQnF,KAAKgB,MAAxBoD,EADW,EACXA,KAAMO,EADK,EACLA,SACTA,GACH3E,KAAKgF,eAGM,IAATZ,GAAeO,GACjB3E,KAAK+E,WAAU,K,gCAITM,GAAU,IAAD,OACjBrF,KAAKyB,SAAS,CACZkD,UAAU,EACVN,gBAAgB,IACf,WAAO,IACAD,EAAS,EAAKpD,MAAdoD,KADD,EAE2C,EAAKnE,MAA/CqF,EAFD,EAECA,OAAQC,EAFT,EAESA,UAAWC,EAFpB,EAEoBA,mBAErBC,EADcH,EAAZI,QACwBJ,EAAOK,SACvC,GAAIN,EAAS,CACX,IAAM1B,EAAQC,EAAgBQ,EAAMqB,EAAgBG,YACpDL,EAAU5B,GACV6B,IACA,EAAKL,mBAAmBxB,GAE1B,EAAKsB,mB,+CAIiB,IAAD,EACiBjF,KAAKC,MAArC4F,EADe,EACfA,SAAUC,EADK,EACLA,UACVH,EAFe,EACML,OACrBK,QAEFI,EAAS,CACbxF,KAAMsF,EACNlC,MAAOmC,EACPE,IAJahG,KAAKsD,eAOpB,GADsB,IAClBqC,EAA2B,CAC7B,IAAMM,EAAalE,aAAamE,QAAUC,KAAKC,MAAMrE,aAAamE,SAAW,GACzEG,EAAU,sBAAOJ,GAAP,CAAmBF,IACjCM,EAAWC,MAAK,SAACC,EAAGC,GAAJ,OAAUA,EAAE7C,MAAQ4C,EAAE5C,SACtC0C,EAAaA,EAAWI,KAAI,SAACC,EAAYC,GAAb,sBACvBD,EADuB,CAE1BC,aAEF,IAAMC,EAAgBT,KAAKU,UAAUR,GACrCtE,aAAamE,QAAUU,K,oCAIZ,IACLE,EAAc9G,KAAKC,MAAnB6G,UACFvD,EAASC,IAAIsD,GAAWrD,WAG9B,MADY,0CAAsCF,K,8BAKlDvD,KAAKyB,SAAS,CACZkD,UAAU,EACVN,gBAAgB,EAChBD,KAAM,GACNQ,mBAAeC,EACfC,UAAU,M,qCAIE,IAAD,OAEPiC,EAAmBC,aAAY,WACnC,EAAKvF,UAAS,SAACwF,GAAD,MAAgB,CAC5B7C,KAAM6C,EAAU7C,KAAO,EACvBQ,cAAemC,QAJA,O,qCAUE/G,KAAKgB,MAAlB8D,UAEN9E,KAAKyB,SAAU,CACbqD,UAAU,GACR9E,KAAKkF,kB,oCAIE,IACLN,EAAkB5E,KAAKgB,MAAvB4D,cACJA,IACFsC,cAActC,GACd5E,KAAKyB,SAAS,CACZmD,mBAAeC,O,yCAKFsC,GAAS,IAAD,EACkCnH,KAAKC,MAAxD4F,EADiB,EACjBA,SAAUC,EADO,EACPA,UAAWgB,EADJ,EACIA,UAAWM,EADf,EACeA,eAClCpG,EAAQ,CACZ+E,OAAQ,CACNxF,KAAMsF,EACNwB,WAA+B,IAAnBD,EAAuB,EAAIA,EAAiB,EACxDzD,WAAkBkB,IAAXsC,EAAuB,EAAIrB,EAAYqB,EAC9CG,cAAeR,IAGnB/E,aAAaC,QAAQ,QAASmE,KAAKU,UAAU7F,M,sCAG/BuF,EAAGC,GAGjB,OAAQD,EAAEgB,OAASf,EAAEe,OAFT,GACM,I,+BAKV,IAGJ9B,EAAqB+B,EAHlB,OACClC,EAAWtF,KAAKC,MAAhBqF,OACAI,EAAYJ,EAAZI,QAFD,EAIoC1F,KAAKgB,MAAxC2D,EAJD,EAICA,SAAUP,EAJX,EAIWA,KAAMC,EAJjB,EAIiBA,eAClBoD,EAAI,oBACV,GAAI/B,EAAS,CAEX,IAAMgC,EAAgB,CAAErC,SAAS,EAAMkC,QADvC9B,EAAkBC,EAAQJ,EAAOK,UAC8BgC,gBAEzDC,EAAenC,EAAgBoC,kBAAkBpB,KAAI,SAACc,EAAQZ,GAAT,MAAoB,CAC7EtB,SAAS,EAAOkC,SAAQZ,aAE1Ba,EAAU,CAAIE,GAAJ,mBAAsBE,KACrBtB,MAAK,SAACC,EAAGC,GAAJ,OAAU,EAAKsB,gBAAgBvB,EAAGC,MAEpD,OACE,6BAASnG,UAAU,gBACjB,uBAAGA,UAAU,SAAb,gBAA+B+D,IAC9BqB,EAEG,uBAAGhF,cAAcgH,EAAIpH,UAAYoH,GAAjC,oBACgBhC,EAAgBsC,WAGhC,yCACJ,yBAAK1H,UAAU,mBACdoF,EAAkB,uBACjBhF,cAAY,gBACZJ,UAAU,OACV2H,wBAA0B,CAAEC,OAAQxC,EAAgByC,YAElD,yCACFV,EACEA,EAAWf,KAAI,SAACc,EAAQZ,GAAT,OACf,4BACErG,KAAK,SACLgC,SAAWqC,EACXwD,IAAMxB,EACNlG,cAAc8G,EAAOlC,QACjB,iBADU,uBACyBkC,EAAOZ,OAC9CtG,UAAasE,IACN4C,EAAOlC,QAAU,iBAAmB,iBAAoB,SAC/D9C,QAAU,kBAAM,EAAKwC,UAAUwC,EAAOlC,WAErCkC,EAAOA,WAEP,sCACP,kBAAC,EAAD,CACElD,eAAiBA,EACjBD,KAAOA,EACPG,IAAMvE,KAAKoF,MACXZ,uBAAyBxE,KAAKwE,8B,GAnMrB7D,aAoOJkC,eAbS,SAAC7B,GAAD,MAAY,CAClCsE,OAAQtE,EAAM+B,WAAWqF,QACzBvC,SAAU7E,EAAM+B,WAAWC,SAASzC,KACpCuF,UAAW9E,EAAM+B,WAAWC,SAASW,MACrCmD,UAAW9F,EAAM+B,WAAWC,SAAS/B,MACrCmG,eAAgBpG,EAAM+B,WAAWC,SAASqF,2BAGjB,SAACnF,GAAD,MAAe,CACxCqC,UAAW,SAAC4B,GAAD,OAAYjE,EL/Na,CACpC5C,KAAM,YACNQ,QK6NyCqG,KACzC3B,mBAAoB,kBAAMtC,EL3NoB,CAC9C5C,KAAM,qCK6NOuC,CAA6C6B,GCtOtD4D,E,4LAEFtI,KAAKuI,c,uHAICzG,EAAQC,aAAayG,QAAQ,SAC3BC,EAAczI,KAAKC,MAAnBwI,U,mBACgBvG,MAAM,8CAAD,OAA+CJ,K,cAAtE4G,E,0BACoBA,EAAUtG,Q,OAA9BuG,E,OACNF,EAAUE,G,gFAGF,IAEAhD,EADW3F,KAAKC,MAAhBqF,OACAK,QAER,OACE,8BACE,kBAAC,EAAD,MACA,kBAAC,EAAD,MAJiB,IAKhBA,GAA4B,kBAAC,IAAD,CAAUiD,GAAG,mB,GArB7BlI,IAAMC,WA0CZkC,eAXS,SAAC7B,GAAD,MAAY,CAClCsE,OAAQtE,EAAM+B,WAAWqF,YALA,SAAClF,GAAD,MAAe,CACxCuF,UAAW,SAAC3H,GAAD,OAAcoC,EAASrC,EAAUC,QAc/B+B,CAA6CyF,GCtC7CO,E,iLARX,OACE,6BACE,wBAAIpI,cAAY,kBAAhB,6B,GAJoBC,IAAMC,WCI5BmI,G,kBACJ,aAAe,IAAD,8BACZ,+CACK9H,MAAQ,CACXqC,OAAQ,wEAEV,EAAKC,YAAc,EAAKA,YAAYlC,KAAjB,gBALP,E,iFASZpB,KAAKsD,gB,oCAGQ,IACLL,EAAcjD,KAAKC,MAAnBgD,UACFM,EAASC,IAAIP,GAAWQ,WAC9BzD,KAAKyB,SAAS,CACZ4B,OAAO,mCAAD,OAAqCE,O,+BAIrC,IAAD,EACyBvD,KAAKC,MAA7B6C,EADD,EACCA,SAAUY,EADX,EACWA,UACVL,EAAWrD,KAAKgB,MAAhBqC,OACR,OACE,4BAAQhD,UAAU,mBAChB,yBACEoC,IAAMY,EACNV,IAAMG,EACNrC,cAAY,2BAEd,wBAAIA,cAAY,sBAAhB,UAA0CqC,IAC1C,wBAAIrC,cAAY,gBAAiBiD,Q,GAhCZ/C,cAkDdkC,eANS,SAAC7B,GAAD,MAAY,CAClCiC,UAAWjC,EAAM+B,WAAWC,SAAS/B,MACrC6B,SAAU9B,EAAM+B,WAAWC,SAASzC,KACpCmD,UAAW1C,EAAM+B,WAAWC,SAASW,SAGxBd,CAAyBiG,G,yBCjDlCC,E,0LACcC,GAChB,IAAIC,EAKJ,OAHID,EADc,EACMC,EAAU,gDACzBD,GAFS,IAEYC,EAAU,wCAEjCA,I,+BAGC,IAAD,EACiDjJ,KAAKC,MAArDoI,EADD,EACCA,uBAAwBa,EADzB,EACyBA,WAAYvH,EADrC,EACqCA,QAC5C,OACE,0BAAMtB,UAAU,iBACd,kBAAC,EAAD,MACA,6BAASA,UAAU,4BACjB,yBAAKA,UAAU,2BACb,uBAAGI,cAAY,iBACZT,KAAKmJ,kBAAkBd,IAE1B,uBAAG5H,cAAY,wBAAf,mBAEGyI,GAEH,uBAAGzI,cAAY,2BAAf,sBAEG4H,IAGL,yBAAK5F,IAAM2G,IAAOzG,IAAI,UAGxB,yBAAKtC,UAAU,6BACb,4BACEC,KAAK,SACLG,cAAY,iBACZ8B,QAAU,kBAAMZ,EAAQM,KAAK,YAC7B5B,UAAU,oBAJZ,mBAQA,4BACEC,KAAK,SACLG,cAAY,cACZ8B,QAAU,kBAAMZ,EAAQM,KAAK,aAC7B5B,UAAU,kBAJZ,qB,GAzCaM,aAuERkC,eAbS,SAAC7B,GAAD,MAAY,CAClCqH,uBAAwBrH,EAAM+B,WAAWC,SAASqF,uBAClDa,WAAYlI,EAAM+B,WAAWC,SAASW,SAWzBd,CAAyBkG,G,yBC1BzBM,E,iLA7CX,IAAMC,EAAanD,KAAKC,MAAMrE,aAAamE,SACnCvE,EAAY3B,KAAKC,MAAjB0B,QACR,OACE,8BACE,4BAAQtB,UAAU,kBAChB,wBAAII,cAAY,iBAAhB,WACA,yBAAKgC,IAAM8G,IAAO5G,IAAI,qBAAqBtC,UAAU,cAGvD,4BACEC,KAAK,SACLG,cAAY,cACZ8B,QAAU,kBAAMZ,EAAQM,KAAK,YAC7B5B,UAAU,eAJZ,UASCiJ,EAAW7C,KAAK,SAACV,EAAQY,GAAT,OACf,6BAASwB,IAAMxB,EAAQtG,UAAU,kBAC/B,yBAAKoC,IAAMsD,EAAOC,IAAMrD,IAAI,aAC5B,uBAAGlC,cAAA,sBAA6BkG,IAC7BZ,EAAOxF,KACJwF,EAAOxF,KAAO,aAFpB,KAMA,uBAAGE,cAAA,uBAA8BkG,IAC9BZ,EAAOpC,MACP,IAFH,mB,GA7BUjD,IAAMC,WCOR6I,QACW,cAA7BC,OAAOC,SAASC,UAEe,UAA7BF,OAAOC,SAASC,UAEhBF,OAAOC,SAASC,SAASC,MACvB,2D,4BClBAC,GAAiB,CACrBzB,QAAS,CACPzC,QAAS,GAEX3C,SAAU,CACRzC,KAAM,GACNU,MAAO,GACP0C,MAAO,EACP0E,uBAAwB,IAuDbtF,OAnDf,WAAqD,IAAjC/B,EAAgC,uDAAxB6I,GAAgBxH,EAAQ,uCAClD,OAAQA,EAAO/B,MACf,IAAK,aACH,OAAO,eAAKU,EAAZ,CAAmBoH,QAAQ,eAAMpH,EAAMoH,QAAb,GAAyB/F,EAAOvB,WAE5D,IAAK,eACH,OAAO,eACFE,EADL,CAEEgC,SAAS,eACJhC,EAAMgC,SADH,CAENzC,KAAM8B,EAAOvB,QAAQP,KACrBU,MAAOoB,EAAOvB,QAAQG,UAG5B,IAAK,YACH,OAAO,eACFD,EADL,CAEEgC,SAAS,eACJhC,EAAMgC,SADH,CAENW,MAAO3C,EAAMgC,SAASW,MAAQtB,EAAOvB,YAG3C,IAAK,+BACH,OAAO,eACFE,EADL,CAEEgC,SAAS,eACJhC,EAAMgC,SADH,CAENqF,uBAAwBrH,EAAMgC,SAASqF,uBAAyB,MAGtE,IAAK,cACH,OAAO,eACFrH,EADL,CAEEoH,QAAQ,eACHpH,EAAMoH,QADJ,CAELzC,QAAS3E,EAAMoH,QAAQzC,QAAU,MAGvC,IAAK,gBACH,OAAO,eACF3E,EADL,CAEEoH,QAAS,CACPzC,QAAS,GAEX3C,SAAU,CAAEzC,KAAM,GAAIU,MAAO,GAAI0C,MAAO,EAAG0E,uBAAwB,KAEvE,QACE,OAAOrH,ICnDI8I,GALKC,0BAAgB,CAClChH,gBCCIiH,GAAQC,sBAAYH,GAAaI,8BAAoBC,0BAAgBC,OAEvEX,OAAOY,UACTZ,OAAOO,MAAQA,IAGFA,UCFfM,IAASC,OAEP,kBAAC,IAAD,CAAUP,MAAQA,IAChB,kBAAC,IAAD,KACE,mBCJS,WACb,OACE,kBAAC,IAAD,KAEE,kBAAC,IAAD,CAAOQ,OAAK,EAACC,KAAK,UAAUC,UAAY3J,IACxC,kBAAC,IAAD,CAAO0J,KAAK,eAAeC,UAAYpC,IACvC,kBAAC,IAAD,CAAOmC,KAAK,iBAAiBC,UAAY7B,IACzC,kBAAC,IAAD,CAAO4B,KAAK,YAAYC,UAAY3B,IACpC,kBAAC,IAAD,CAAO0B,KAAK,WAAWC,UAAYrB,ODJnC,QAIJsB,SAASC,eAAe,SJkHpB,kBAAmBC,WACrBA,UAAUC,cAAcC,MAAMC,MAAK,SAAAC,GACjCA,EAAaC,kB","file":"static/js/main.1c90f807.chunk.js","sourcesContent":["module.exports = __webpack_public_path__ + \"static/media/trivia.466d153e.png\";","module.exports = __webpack_public_path__ + \"static/media/castelo.4f95b1fe.gif\";","module.exports = __webpack_public_path__ + \"static/media/nino.a4689103.webp\";","module.exports = __webpack_public_path__ + \"static/media/rato.f418d2eb.gif\";","import React from 'react';\nimport propTypes from 'prop-types';\n\nclass EmailInput extends React.Component {\n  render() {\n    const { value, onChange } = this.props;\n    return (\n      <label htmlFor=\"email\" className=\"label-login\">\n        Email:\n        <input\n          className=\"input-login\"\n          type=\"text\"\n          name=\"email\"\n          id=\"email\"\n          data-testid=\"input-gravatar-email\"\n          value={ value }\n          onChange={ onChange }\n        />\n      </label>\n    );\n  }\n}\n\nEmailInput.propTypes = {\n  value: propTypes.string.isRequired,\n  onChange: propTypes.func.isRequired,\n};\n\nexport default EmailInput;\n","import React from 'react';\nimport propTypes from 'prop-types';\n\nclass LoginInput extends React.Component {\n  render() {\n    const { value, onChange } = this.props;\n    return (\n      <label htmlFor=\"login\" className=\"label-login\">\n        Login:\n        <input\n          className=\"input-login\"\n          type=\"text\"\n          name=\"login\"\n          id=\"login\"\n          data-testid=\"input-player-name\"\n          value={ value }\n          onChange={ onChange }\n        />\n      </label>\n    );\n  }\n}\n\nLoginInput.propTypes = {\n  value: propTypes.string.isRequired,\n  onChange: propTypes.func.isRequired,\n};\n\nexport default LoginInput;\n","const addTrivia = (payload) => ({\n  type: 'ADD_TRIVIA',\n  payload,\n});\n\n// Payload deverá ser o objeto do userData, com chame name: e email:\nexport const addUserData = (payload) => ({\n  type: 'ADD_USERDATA',\n  payload,\n});\n\nexport const addScore = (payload) => ({\n  type: 'ADD_SCORE',\n  payload,\n});\n\nexport const addCorrectQuestionCounter = () => ({\n  type: 'ADD_CORRECT_QUESTION_COUNTER',\n});\n\nexport const addCurrent = () => ({\n  type: 'ADD_CURRENT',\n});\n\nexport const resetCurrent = () => ({\n  type: 'RESET_CURRENT',\n});\n\nexport default addTrivia;\n","import React from 'react';\nimport PropTypes from 'prop-types';\nimport { connect } from 'react-redux';\nimport EmailInput from '../../Components/EmailInput';\nimport LoginInput from '../../Components/LoginInput';\nimport logo from '../../trivia.png';\nimport castelo from '../../Images/castelo.gif';\nimport { addUserData, resetCurrent } from '../../redux/actions';\nimport './styles.css';\n\nclass Login extends React.Component {\n  constructor(props) {\n    super(props);\n    this.state = {\n      email: '',\n      login: '',\n    };\n    this.handleChange = this.handleChange.bind(this);\n    this.checkFields = this.checkFields.bind(this);\n  }\n\n  componentDidMount() {\n    const { removeCurrent } = this.props;\n    removeCurrent();\n  }\n\n  handleChange(event) {\n    const { name, value } = event.target;\n    this.setState({\n      [name]: value,\n    });\n  }\n\n  checkFields() {\n    const { email, login } = this.state;\n    return !(login.length !== 0 && email.length !== 0);\n  }\n\n  async handleClick() {\n    const { history, functionAddUserData } = this.props;\n    const { email, login } = this.state;\n    const payload = {\n      name: login,\n      email,\n    };\n    functionAddUserData(payload);\n    const token = await this.fetchToken();\n    // localStorage.state = {\n    //   ...localStorage.state,\n    //   player: {\n    //     name: login,\n    //     gravatarEmail: email,\n    //   },\n    // };\n    localStorage.setItem('token', token);\n\n    history.push('/trivia-game');\n  }\n\n  async fetchToken() {\n    const urlToken = await fetch('https://opentdb.com/api_token.php?command=request');\n    const { token } = await urlToken.json();\n    return token;\n  }\n\n  render() {\n    const { login, email } = this.state;\n    const { history } = this.props;\n    return (\n      <main>\n\n        <form action=\"GET\" className=\"form-login\">\n          <LoginInput onChange={ this.handleChange } value={ login } />\n\n          <EmailInput onChange={ this.handleChange } value={ email } />\n\n          <button\n            className=\"button-login\"\n            type=\"button\"\n            data-testid=\"btn-play\"\n            disabled={ this.checkFields() }\n            onClick={ () => this.handleClick() }\n          >\n            Jogar\n\n          </button>\n\n          <button\n            className=\"button-config\"\n            type=\"button\"\n            data-testid=\"btn-settings\"\n            onClick={ () => history.push('/configuracoes') }\n          >\n            Configurações\n          </button>\n        </form>\n        <section className=\"login-image-container\">\n          <img src={ logo } className=\"App-logo\" alt=\"logo\" />\n\n          <img src={ castelo } alt=\"Castelo\" />\n\n        </section>\n\n      </main>\n\n    );\n  }\n}\n\nLogin.propTypes = {\n  history: PropTypes.shape({\n    push: PropTypes.func.isRequired,\n  }).isRequired,\n  functionAddUserData: PropTypes.func.isRequired,\n  removeCurrent: PropTypes.func.isRequired,\n};\n\nconst mapDispatchToProps = (dispatch) => ({\n  functionAddUserData: (payload) => { dispatch(addUserData(payload)); },\n  removeCurrent: () => { dispatch(resetCurrent()); },\n});\n\n// estadoGlobal = {\n//   apliReducer: {\n//     trivias: [],\n//     userData: {\n//       name: '',\n//       email: '',\n//     },\n//   }\n//   }\n\nconst mapStateToProps = (state) => ({\n  userName: state.apiReducer.userData.name,\n  userEmail: state.apiReducer.userData.email,\n});\nexport default connect(mapStateToProps, mapDispatchToProps)(Login);\n","import React from 'react';\nimport propTypes from 'prop-types';\nimport { connect } from 'react-redux';\nimport MD5 from 'crypto-js/md5';\nimport './styles.css';\n\nclass Header extends React.Component {\n  constructor(props) {\n    super(props);\n    this.state = {\n      imgURL: 'https://www.gravatar.com/avatar/205e460b479e2e5b48aec07710c08d50?f=y',\n    };\n    this.fetchImgSrc = this.fetchImgSrc.bind(this);\n  }\n\n  componentDidMount() {\n    this.fetchImgSrc();\n  }\n\n  fetchImgSrc() {\n    const { userEmail } = this.props;\n    const hashed = MD5(userEmail).toString();\n    this.setState({\n      imgURL: `https://www.gravatar.com/avatar/${hashed}`,\n    });\n  }\n\n  render() {\n    const { userName, userScore } = this.props;\n    const { imgURL } = this.state;\n    return (\n      <header className=\"trivia-header\">\n        <img src={ imgURL } alt=\"Your avatar\" data-testid=\"header-profile-picture\" />\n        <h1 data-testid=\"header-player-name\">{userName}</h1>\n        <h2 data-testid=\"header-score\">{userScore}</h2>\n      </header>\n    );\n  }\n}\n\nHeader.propTypes = {\n  userName: propTypes.string.isRequired,\n  userScore: propTypes.number.isRequired,\n  userEmail: propTypes.string.isRequired,\n};\n\nconst mapStateToProps = (state) => ({\n  userName: state.apiReducer.userData.name,\n  userEmail: state.apiReducer.userData.email,\n  userScore: state.apiReducer.userData.score,\n});\nexport default connect(mapStateToProps, null)(Header);\n","const scoreCalculator = (timer, difficult) => {\n  const difficultObject = {\n    hard: 3,\n    medium: 2,\n    easy: 1,\n  };\n  const difficultPoints = difficultObject[difficult];\n  const basePoints = 10;\n  return (basePoints + (timer * difficultPoints));\n};\n\nexport default scoreCalculator;\n","import React from 'react';\nimport propTypes from 'prop-types';\nimport { connect } from 'react-redux';\nimport { addCurrent } from '../../redux/actions';\nimport './styles.css';\n\nclass ButtonNext extends React.Component {\n  constructor() {\n    super();\n    this.buttonDisabledOrTime = this.buttonDisabledOrTime.bind(this);\n  }\n\n  buttonDisabledOrTime() {\n    const { time, buttonDisabled } = this.props;\n    if (buttonDisabled === false || time === 0) {\n      return false;\n    }\n    return true;\n  }\n\n  buttonClick() {\n    const { increaseCurrent, rst, saveRankOnLocalStorage } = this.props;\n    increaseCurrent();\n    rst();\n    saveRankOnLocalStorage();\n  }\n\n  render() {\n    return (\n      <div>\n        {\n          this.buttonDisabledOrTime() ? <p> </p>\n            : (\n              <button\n                className=\"button-next\"\n                type=\"button\"\n                data-testid=\"btn-next\"\n                onClick={ () => this.buttonClick() }\n              >\n                Próxima\n              </button>)\n        }\n      </div>\n    );\n  }\n}\n\nButtonNext.propTypes = {\n  time: propTypes.number.isRequired,\n  buttonDisabled: propTypes.bool.isRequired,\n  increaseCurrent: propTypes.func.isRequired,\n  rst: propTypes.func.isRequired,\n  saveRankOnLocalStorage: propTypes.func.isRequired,\n};\n\nconst mapDispatchToProps = (dispatch) => ({\n  increaseCurrent: () => dispatch(addCurrent()),\n});\n\nexport default connect(null, mapDispatchToProps)(ButtonNext);\n","import React, { Component } from 'react';\nimport { connect } from 'react-redux';\nimport propTypes from 'prop-types';\nimport './styles.css';\nimport MD5 from 'crypto-js/md5';\nimport { addScore, addCorrectQuestionCounter } from '../../redux/actions';\nimport scoreCalculator from '../../helpers/scoreCalculator';\nimport ButtonNext from '../ButtonNext';\n// import apiReducer from '../../redux/reducers/apiReducer';\n\nclass Game extends Component {\n  constructor(props) {\n    super(props);\n    this.state = {\n      answered: false,\n      buttonDisabled: true,\n      time: 30,\n      constInterval: undefined,\n      counting: false,\n    };\n    this.setAnswer = this.setAnswer.bind(this);\n    this.startTimming = this.startTimming.bind(this);\n    this.stopTimming = this.stopTimming.bind(this);\n    this.makeInterval = this.makeInterval.bind(this);\n    this.saveOnLocalStorage = this.saveOnLocalStorage.bind(this);\n    this.reset = this.reset.bind(this);\n    this.saveRankOnLocalStorage = this.saveRankOnLocalStorage.bind(this);\n  }\n\n  componentDidMount() {\n    this.saveOnLocalStorage();\n  }\n\n  componentDidUpdate() {\n    const { time, answered } = this.state;\n    if (!answered) {\n      this.startTimming();\n    }\n\n    if (time === 0 && !answered) {\n      this.setAnswer(false);\n    }\n  }\n\n  setAnswer(correct) {\n    this.setState({\n      answered: true,\n      buttonDisabled: false,\n    }, () => {\n      const { time } = this.state;\n      const { trivia, addPoints, addCorrectQuestion } = this.props;\n      const { results } = trivia;\n      const currentQuestion = results[trivia.current];\n      if (correct) {\n        const score = scoreCalculator(time, currentQuestion.difficulty);\n        addPoints(score);\n        addCorrectQuestion();\n        this.saveOnLocalStorage(score);\n      }\n      this.stopTimming();\n    });\n  }\n\n  saveRankOnLocalStorage() {\n    const { nameUser, scoreUser, trivia } = this.props;\n    const { current } = trivia;\n    const imgUrl = this.fetchImgSrc();\n    const player = {\n      name: nameUser,\n      score: scoreUser,\n      img: imgUrl,\n    };\n    const ALL_QUESTIONS = 4;\n    if (current === ALL_QUESTIONS) {\n      const oldRanking = localStorage.ranking ? JSON.parse(localStorage.ranking) : [];\n      let newRanking = [...oldRanking, player];\n      newRanking.sort((a, b) => b.score - a.score);\n      newRanking = newRanking.map((currPlayer, index) => ({\n        ...currPlayer,\n        index,\n      }));\n      const rankingString = JSON.stringify(newRanking);\n      localStorage.ranking = rankingString;\n    }\n  }\n\n  fetchImgSrc() {\n    const { emailUser } = this.props;\n    const hashed = MD5(emailUser).toString();\n\n    const imgURL = `https://www.gravatar.com/avatar/${hashed}`;\n    return imgURL;\n  }\n\n  reset() {\n    this.setState({\n      answered: false,\n      buttonDisabled: true,\n      time: 30,\n      constInterval: undefined,\n      counting: false,\n    });\n  }\n\n  makeInterval() {\n    const ONE_SECOND = 1000;\n    const setConstInterval = setInterval(() => {\n      this.setState((prevState) => ({\n        time: prevState.time - 1,\n        constInterval: setConstInterval,\n      }));\n    }, ONE_SECOND);\n  }\n\n  startTimming() {\n    const { counting } = this.state;\n    if (!counting) {\n      this.setState(({\n        counting: true,\n      }), this.makeInterval());\n    }\n  }\n\n  stopTimming() {\n    const { constInterval } = this.state;\n    if (constInterval) {\n      clearInterval(constInterval);\n      this.setState({\n        constInterval: undefined,\n      });\n    }\n  }\n\n  saveOnLocalStorage(points) {\n    const { nameUser, scoreUser, emailUser, assertionsUser } = this.props;\n    const state = {\n      player: {\n        name: nameUser,\n        assertions: assertionsUser === 0 ? 0 : assertionsUser + 1,\n        score: points === undefined ? 0 : scoreUser + points,\n        gravatarEmail: emailUser,\n      },\n    };\n    localStorage.setItem('state', JSON.stringify(state));\n  }\n\n  compareFunction(a, b) {\n    const ONE = 1;\n    const MINUSONE = -1;\n    return (a.answer > b.answer) ? ONE : MINUSONE;\n  }\n\n  // eslint-disable-next-line max-lines-per-function\n  render() {\n    const { trivia } = this.props;\n    const { results } = trivia;\n    let currentQuestion; let allAnswers;\n    const { answered, time, buttonDisabled } = this.state;\n    const c = 'question-category';\n    if (results) {\n      currentQuestion = results[trivia.current];\n      const correctAnswer = { correct: true, answer: currentQuestion.correct_answer,\n      };\n      const wrongAnswers = currentQuestion.incorrect_answers.map((answer, index) => ({\n        correct: false, answer, index,\n      }));\n      allAnswers = [correctAnswer, ...wrongAnswers];\n      allAnswers.sort((a, b) => this.compareFunction(a, b));\n    }\n    return (\n      <section className=\"game-section\">\n        <p className=\"timer\">{`Time: ${time}`}</p>\n        {currentQuestion\n          ? (\n            <p data-testid={ c } className={ c }>\n              {`Category: ${currentQuestion.category}`}\n            </p>\n          )\n          : <p>Loading...</p>}\n        <div className=\"question-image\" />\n        {currentQuestion ? <p\n          data-testid=\"question-text\"\n          className=\"text\"\n          dangerouslySetInnerHTML={ { __html: currentQuestion.question } }\n        />\n          : <p>Loading...</p>}\n        { allAnswers\n          ? allAnswers.map((answer, index) => (\n            <button\n              type=\"button\"\n              disabled={ answered }\n              key={ index }\n              data-testid={ answer.correct\n                ? 'correct-answer' : `wrong-answer-${answer.index}` }\n              className={ (answered\n                 && (answer.correct ? 'correct answer' : 'wrong answer')) || 'answer' }\n              onClick={ () => this.setAnswer(answer.correct) }\n            >\n              {answer.answer}\n            </button>\n          )) : <p>Loading</p>}\n        <ButtonNext\n          buttonDisabled={ buttonDisabled }\n          time={ time }\n          rst={ this.reset }\n          saveRankOnLocalStorage={ this.saveRankOnLocalStorage }\n        />\n      </section>\n    );\n  }\n}\n\nGame.propTypes = {\n  trivia: propTypes.shape({\n    current: propTypes.number.isRequired,\n    results: propTypes.arrayOf(propTypes.object.isRequired),\n  }).isRequired,\n  addPoints: propTypes.func.isRequired,\n  nameUser: propTypes.string.isRequired,\n  scoreUser: propTypes.number.isRequired,\n  emailUser: propTypes.string.isRequired,\n  addCorrectQuestion: propTypes.func.isRequired,\n  assertionsUser: propTypes.number.isRequired,\n};\n\nconst mapStateToProps = (state) => ({\n  trivia: state.apiReducer.trivias,\n  nameUser: state.apiReducer.userData.name,\n  scoreUser: state.apiReducer.userData.score,\n  emailUser: state.apiReducer.userData.email,\n  assertionsUser: state.apiReducer.userData.correctQuestionCounter,\n});\n\nconst mapDispatchToProps = (dispatch) => ({\n  addPoints: (points) => dispatch(addScore(points)),\n  addCorrectQuestion: () => dispatch(addCorrectQuestionCounter()),\n});\n\nexport default connect(mapStateToProps, mapDispatchToProps)(Game);\n","import React from 'react';\nimport { connect } from 'react-redux';\nimport propTypes from 'prop-types';\nimport { Redirect } from 'react-router';\nimport Header from '../../Components/Header';\nimport Game from '../../Components/Game';\nimport addTrivia from '../../redux/actions';\n\nclass Trivia extends React.Component {\n  componentDidMount() {\n    this.getTrivia();\n  }\n\n  async getTrivia() {\n    const token = localStorage.getItem('token');\n    const { setTrivia } = this.props;\n    const questions = await fetch(`https://opentdb.com/api.php?amount=5&token=${token}`);\n    const requestions = await questions.json();\n    setTrivia(requestions);\n  }\n\n  render() {\n    const { trivia } = this.props;\n    const { current } = trivia;\n    const maxQuestions = 5;\n    return (\n      <main>\n        <Header />\n        <Game />\n        {current === maxQuestions && <Redirect to=\"/feedback\" />}\n      </main>\n    );\n  }\n}\n\nconst mapDispatchToProps = (dispatch) => ({\n  setTrivia: (payload) => (dispatch(addTrivia(payload))),\n});\n\nconst mapStateToProps = (state) => ({\n  trivia: state.apiReducer.trivias,\n});\n\nTrivia.propTypes = {\n  setTrivia: propTypes.func.isRequired,\n  trivia: propTypes.shape({\n    current: propTypes.number.isRequired,\n  }).isRequired,\n};\n\nexport default connect(mapStateToProps, mapDispatchToProps)(Trivia);\n","import React from 'react';\n\nclass Configuracoes extends React.Component {\n  render() {\n    return (\n      <div>\n        <h2 data-testid=\"settings-title\">Configurações:</h2>\n      </div>\n    );\n  }\n}\n\nexport default Configuracoes;\n","import React, { Component } from 'react';\nimport propTypes from 'prop-types';\nimport MD5 from 'crypto-js/md5';\nimport { connect } from 'react-redux';\nimport './styles.css';\n\nclass HeaderFeedback extends Component {\n  constructor() {\n    super();\n    this.state = {\n      imgURL: 'https://www.gravatar.com/avatar/205e460b479e2e5b48aec07710c08d50?f=y',\n    };\n    this.fetchImgSrc = this.fetchImgSrc.bind(this);\n  }\n\n  componentDidMount() {\n    this.fetchImgSrc();\n  }\n\n  fetchImgSrc() {\n    const { userEmail } = this.props;\n    const hashed = MD5(userEmail).toString();\n    this.setState({\n      imgURL: `https://www.gravatar.com/avatar/${hashed}`,\n    });\n  }\n\n  render() {\n    const { userName, userScore } = this.props;\n    const { imgURL } = this.state;\n    return (\n      <header className=\"header-feedback\">\n        <img\n          src={ imgURL }\n          alt={ userName }\n          data-testid=\"header-profile-picture\"\n        />\n        <h1 data-testid=\"header-player-name\">{ `${userName}` }</h1>\n        <h2 data-testid=\"header-score\">{ userScore }</h2>\n      </header>\n    );\n  }\n}\n\nHeaderFeedback.propTypes = {\n  userEmail: propTypes.string.isRequired,\n  userName: propTypes.string.isRequired,\n  userScore: propTypes.number.isRequired,\n};\n\nconst mapStateToProps = (state) => ({\n  userEmail: state.apiReducer.userData.email,\n  userName: state.apiReducer.userData.name,\n  userScore: state.apiReducer.userData.score,\n});\n\nexport default connect(mapStateToProps)(HeaderFeedback);\n","import React, { Component } from 'react';\nimport propTypes from 'prop-types';\nimport { connect } from 'react-redux';\nimport HeaderFeedback from '../../Components/HeaderFeedback';\nimport './styles.css';\nimport nino from '../../Images/nino.webp';\n\nclass Feedback extends Component {\n  phraseConstructor(number) {\n    let message;\n    const minNumber = 3;\n    if (number < minNumber) message = 'Plift ploft still, a porta não se abriu...';\n    else if (number >= minNumber) message = 'Plift ploft still, a porta se abriu!';\n\n    return message;\n  }\n\n  render() {\n    const { correctQuestionCounter, totalScore, history } = this.props;\n    return (\n      <main className=\"feedback-main\">\n        <HeaderFeedback />\n        <section className=\"feedback-image-container\">\n          <div className=\"feedback-text-container\">\n            <p data-testid=\"feedback-text\">\n              {this.phraseConstructor(correctQuestionCounter)}\n            </p>\n            <p data-testid=\"feedback-total-score\">\n              Pontuação:\n              {totalScore}\n            </p>\n            <p data-testid=\"feedback-total-question\">\n              Respostas Corretas:\n              {correctQuestionCounter}\n            </p>\n          </div>\n          <img src={ nino } alt=\"nino\" />\n        </section>\n\n        <div className=\"feedback-button-container\">\n          <button\n            type=\"button\"\n            data-testid=\"btn-play-again\"\n            onClick={ () => history.push('/trivia') }\n            className=\"button-playagain\"\n          >\n            Jogar novamente\n          </button>\n          <button\n            type=\"button\"\n            data-testid=\"btn-ranking\"\n            onClick={ () => history.push('/ranking') }\n            className=\"button-ranking\"\n          >\n            Ver Ranking\n          </button>\n\n        </div>\n\n      </main>\n\n    );\n  }\n}\n\nconst mapStateToProps = (state) => ({\n  correctQuestionCounter: state.apiReducer.userData.correctQuestionCounter,\n  totalScore: state.apiReducer.userData.score,\n});\n\nFeedback.propTypes = {\n  correctQuestionCounter: propTypes.number.isRequired,\n  history: propTypes.shape({\n    push: propTypes.func.isRequired,\n  }).isRequired,\n  totalScore: propTypes.number.isRequired,\n};\n\nexport default connect(mapStateToProps)(Feedback);\n","import React from 'react';\nimport propTypes from 'prop-types';\nimport './styles.css';\nimport rato from '../../Images/rato.gif';\n\nclass Ranking extends React.Component {\n  render() {\n    const playerRank = JSON.parse(localStorage.ranking);\n    const { history } = this.props;\n    return (\n      <main>\n        <header className=\"ranking-header\">\n          <h1 data-testid=\"ranking-title\">Ranking</h1>\n          <img src={ rato } alt=\"Rato tomando banho\" className=\"rato-img\" />\n        </header>\n\n        <button\n          type=\"button\"\n          data-testid=\"btn-go-home\"\n          onClick={ () => history.push('/trivia') }\n          className=\"btn-go-home\"\n        >\n          Inicio\n        </button>\n\n        {playerRank.map(((player, index) => (\n          <section key={ index } className=\"player-section\">\n            <img src={ player.img } alt=\"gravatar\" />\n            <p data-testid={ `player-name-${index}` }>\n              {player.name\n                ? player.name : 'Anónimo'}\n              :\n\n            </p>\n            <p data-testid={ `player-score-${index}` }>\n              {player.score}\n              {' '}\n              pontos\n            </p>\n          </section>)))}\n\n      </main>\n    );\n  }\n}\n\nRanking.propTypes = {\n  history: propTypes.shape({\n    push: propTypes.func.isRequired,\n  }).isRequired,\n};\n\nexport default Ranking;\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.0/8 are considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl, {\n    headers: { 'Service-Worker': 'script' }\n  })\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready.then(registration => {\n      registration.unregister();\n    });\n  }\n}\n","const INNITIAL_STATE = {\n  trivias: {\n    current: 0,\n  },\n  userData: {\n    name: '',\n    email: '',\n    score: 0,\n    correctQuestionCounter: 0,\n  },\n};\n\nfunction apiReducer(state = INNITIAL_STATE, action) {\n  switch (action.type) {\n  case 'ADD_TRIVIA':\n    return { ...state, trivias: { ...state.trivias, ...action.payload },\n    };\n  case 'ADD_USERDATA':\n    return {\n      ...state,\n      userData: {\n        ...state.userData,\n        name: action.payload.name,\n        email: action.payload.email,\n      },\n    };\n  case 'ADD_SCORE':\n    return {\n      ...state,\n      userData: {\n        ...state.userData,\n        score: state.userData.score + action.payload,\n      },\n    };\n  case 'ADD_CORRECT_QUESTION_COUNTER':\n    return {\n      ...state,\n      userData: {\n        ...state.userData,\n        correctQuestionCounter: state.userData.correctQuestionCounter + 1,\n      },\n    };\n  case 'ADD_CURRENT':\n    return {\n      ...state,\n      trivias: {\n        ...state.trivias,\n        current: state.trivias.current + 1,\n      },\n    };\n  case 'RESET_CURRENT':\n    return {\n      ...state,\n      trivias: {\n        current: 0,\n      },\n      userData: { name: '', email: '', score: 0, correctQuestionCounter: 0 },\n    };\n  default:\n    return state;\n  }\n}\n\nexport default apiReducer;\n","import { combineReducers } from 'redux';\nimport apiReducer from './apiReducer';\n\nconst rootReducer = combineReducers({\n  apiReducer,\n\n});\n\nexport default rootReducer;\n","import { applyMiddleware, createStore } from 'redux';\nimport { composeWithDevTools } from 'redux-devtools-extension';\nimport thunk from 'redux-thunk';\nimport rootReducer from '../reducers';\n\nconst store = createStore(rootReducer, composeWithDevTools(applyMiddleware(thunk)));\n\nif (window.Cypress) {\n  window.store = store;\n}\n\nexport default store;\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport { BrowserRouter } from 'react-router-dom';\nimport { Provider } from 'react-redux';\nimport App from './App';\nimport * as serviceWorker from './serviceWorker';\nimport store from './redux/store';\n\nReactDOM.render(\n\n  <Provider store={ store }>\n    <BrowserRouter>\n      <App />\n    </BrowserRouter>\n  </Provider>,\n\n  document.getElementById('root'),\n);\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n","import React from 'react';\nimport './App.css';\nimport { Route, Switch } from 'react-router-dom';\nimport Login from './pages/Login';\nimport Trivia from './pages/Trivia';\nimport Configuracoes from './pages/Configuracoes';\nimport Feedback from './pages/Feedback';\nimport Ranking from './pages/Ranking';\n\nexport default function App() {\n  return (\n    <Switch>\n\n      <Route exact path=\"/trivia\" component={ Login } />\n      <Route path=\"/trivia-game\" component={ Trivia } />\n      <Route path=\"/configuracoes\" component={ Configuracoes } />\n      <Route path=\"/feedback\" component={ Feedback } />\n      <Route path=\"/ranking\" component={ Ranking } />\n\n    </Switch>\n  );\n}\n"],"sourceRoot":""}